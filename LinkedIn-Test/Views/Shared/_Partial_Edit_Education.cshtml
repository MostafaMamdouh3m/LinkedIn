@model UserViewModel
@{

    AjaxOptions Edit_Education_ajaxopt = new AjaxOptions()
    {
        HttpMethod = "post",
        UpdateTargetId = "education_data",
        InsertionMode = InsertionMode.Replace,
        OnSuccess = "$('#edit_education').modal('hide')"
    

    };
}



@using (Ajax.BeginForm("EditEducationAjax", "Profile",new {}, Edit_Education_ajaxopt, new { @class = "Edit_Education_form"}))
{
    <div class="modal fade " id="edit_education" tabindex="-1" role="dialog" aria-labelledby="edit_education">
        <div class="modal-dialog" role="document" style="width: 744px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <p class="modal-title" id="myModalLabel" style="color: rgba(0, 0, 0, 0.6); font-size:140%;">Edit Education</p>
                </div>

                <div class="modal-body-editeducation">

                    
                    @*@Html.HiddenFor(e => e.UserHadEducation.Id)*@

                    @*@Html.HiddenFor(e => e.UserHadEducation.Fk_User)*@


                    <div class="form-group">
                        @Html.LabelFor(m => m.Education.Name, new { @class = "labels required" })
                        @Html.DropDownListFor(m => m.UserHadEducation.Fk_Education, new SelectList(Model.EducationsAll, "Id", "Name"), "Select School/University", new { @class = "form-control largedroplist" })
                        @Html.ValidationMessageFor(m => m.Education.Name, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Education.Type, new { @class = "labels" })
                        @Html.EnumDropDownListFor(e => e.Education.Type, "Select Type", new { @class = "form-control largedroplist" })
                        @Html.ValidationMessageFor(m => m.Education.Type, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.UserHadEducation.Degree, new { @class = "labels" })
                        @Html.TextBoxFor(m => m.UserHadEducation.Degree, new { @class = "form-control largetextbox" })
                        @Html.ValidationMessageFor(m => m.UserHadEducation.Degree, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.UserHadEducation.FieldOfStudy, new { @class = "labels" })
                        @Html.TextBoxFor(m => m.UserHadEducation.FieldOfStudy, new { @class = "form-control largetextbox" })
                        @Html.ValidationMessageFor(m => m.UserHadEducation.FieldOfStudy, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.UserHadEducation.Grade, new { @class = "labels" })
                        @Html.EnumDropDownListFor(m => m.UserHadEducation.Grade, "Select Your Grade", new { @class = "form-control largedroplist" })
                        @Html.ValidationMessageFor(m => m.UserHadEducation.Grade, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.UserHadEducation.Activities, new { @class = "labels" })
                        @Html.TextAreaFor(m => m.UserHadEducation.Activities, new { @class = "form-control largetextbox" })
                        @Html.ValidationMessageFor(m => m.UserHadEducation.Activities, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.UserHadEducation.Description, new { @class = "labels" })
                        @Html.TextAreaFor(m => m.UserHadEducation.Description, new { @class = "form-control largetextbox" })
                        @Html.ValidationMessageFor(m => m.UserHadEducation.Description, "", new { @class = "notvalid" })
                    </div>

                    <div class="form-group  duration-editeducation">

                        <div class="startdate">

                            @Html.LabelFor(m => m.UserHadEducation.StartDate, new { @class = "labels" })
                            @Html.EditorFor(m => m.UserHadEducation.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => m.UserHadEducation.StartDate, "", new { @class = "notvalid" })
                        </div>

                        <div class="enddate">
                            @Html.LabelFor(m => m.UserHadEducation.EndDate, new { @class = "labels" })
                            @Html.EditorFor(m => m.UserHadEducation.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => m.UserHadEducation.EndDate, "", new { @class = "notvalid" })
                        </div>

                    </div>

                </div>

                <div class="modal-footer">

                    <input type="submit" value="Save" class="btn btn-primary" style="border-radius:3px;  padding-top:5px; padding-bottom:5px; padding-left:15px;  padding-right:15px; " />

                </div>
            </div>
        </div>
    </div>

}

